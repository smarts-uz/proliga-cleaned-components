// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: vTbSKJVS7fr2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: xwgFLXqL07mD/component
import Button from "../../Button"; // plasmic-import: FZ59S2Z_LV2k/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicLoginnn.module.css"; // plasmic-import: vTbSKJVS7fr2/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: TfB627kbYt5s/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: BLgPkmgd4hOv/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 6EplYmkkN57M/icon

createPlasmicElementProxy;

export type PlasmicLoginnn__VariantMembers = {};
export type PlasmicLoginnn__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginnn__VariantsArgs;
export const PlasmicLoginnn__VariantProps = new Array<VariantPropType>();

export type PlasmicLoginnn__ArgsType = {};
type ArgPropType = keyof PlasmicLoginnn__ArgsType;
export const PlasmicLoginnn__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginnn__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  emailIn?: Flex__<typeof TextInput>;
  passwordIn?: Flex__<typeof TextInput>;
  submitButton?: Flex__<typeof Button>;
};

export interface DefaultLoginnnProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginnn__RenderFunc(props: {
  variants: PlasmicLoginnn__VariantsArgs;
  args: PlasmicLoginnn__ArgsType;
  overrides: PlasmicLoginnn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "emailIn.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordIn.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <TextInput
          data-plasmic-name={"emailIn"}
          data-plasmic-override={overrides.emailIn}
          className={classNames("__wab_instance", sty.emailIn)}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["emailIn", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          placeholder={"Enter Your email"}
          type={"text"}
          value={generateStateValueProp($state, ["emailIn", "value"]) ?? ""}
        />

        <TextInput
          data-plasmic-name={"passwordIn"}
          data-plasmic-override={overrides.passwordIn}
          className={classNames("__wab_instance", sty.passwordIn)}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["passwordIn", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          placeholder={"Enter your password"}
          type={"password"}
          value={generateStateValueProp($state, ["passwordIn", "value"]) ?? ""}
        />

        <Button
          data-plasmic-name={"submitButton"}
          data-plasmic-override={overrides.submitButton}
          className={classNames("__wab_instance", sty.submitButton)}
          color={"green"}
        >
          {"Login"}
        </Button>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "emailIn", "passwordIn", "submitButton"],
  freeBox: ["freeBox", "emailIn", "passwordIn", "submitButton"],
  emailIn: ["emailIn"],
  passwordIn: ["passwordIn"],
  submitButton: ["submitButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  emailIn: typeof TextInput;
  passwordIn: typeof TextInput;
  submitButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginnn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginnn__VariantsArgs;
    args?: PlasmicLoginnn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginnn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLoginnn__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginnn__ArgProps,
          internalVariantPropNames: PlasmicLoginnn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginnn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginnn";
  } else {
    func.displayName = `PlasmicLoginnn.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginnn = Object.assign(
  // Top-level PlasmicLoginnn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    emailIn: makeNodeComponent("emailIn"),
    passwordIn: makeNodeComponent("passwordIn"),
    submitButton: makeNodeComponent("submitButton"),

    // Metadata about props expected for PlasmicLoginnn
    internalVariantProps: PlasmicLoginnn__VariantProps,
    internalArgProps: PlasmicLoginnn__ArgProps
  }
);

export default PlasmicLoginnn;
/* prettier-ignore-end */
